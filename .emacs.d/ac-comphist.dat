((("print" .
   [1 0 0 0 0])
  ("conj" .
   [1 0 0 0])
  ("reduce" .
   [1 0 0 0 0 0])
  (":chrom" .
   [3 0 0 0 0 0])
  ("identity" .
   [1 0 0 0 0 0 0 0])
  ("partition-by" .
   [2 0 0 0 0 0 0 0 0 0 0 0])
  (":variants" .
   [2 0 0 0 0 1 0 0 0])
  ("def" .
   [1 0 0])
  ("path" .
   [1 0 0 0])
  ("if-let" .
   [1 0 0 0 0 0])
  ("with-open" .
   [1 0 0 0 0 0 0 0 0])
  ("reader" .
   [2 0 0 0 0 0])
  ("ensure" .
   [2 0 0 0 0 0])
  ("top-css" .
   [0 0 0 0 0 0 1])
  ("all-props" .
   [0 0 0 0 0 0 1 0 0])
  ("type" .
   [1 0 0 0])
  ("uploads" .
   [5 0 0 0 0 0 0])
  (":tempfile" .
   [2 0 0 0 0 0 0 0 0])
  ("->props" .
   [2 0 0 0 0 0 0])
  ("tempfile" .
   [1 0 0 0 0 0 0 0])
  ("others" .
   [2 0 0 0 0 0])
  ("vals" .
   [1 0 0 0])
  ("filter" .
   [2 0 0 0 0 0])
  ("dissoc" .
   [1 0 0 0 0 0])
  (":filename" .
   [1 0 0 0 0 0 0 0 0])
  ("empty?" .
   [1 0 0 0 0 0])
  ("val" .
   [1 0 0])
  ("remove" .
   [4 0 0 0 0 0])
  ("pie-params" .
   [2 0 0 0 0 0 2 0 0 0])
  ("apply" .
   [4 0 0 0 0])
  (":ul" .
   [1 0 0])
  ("map" .
   [5 0 0])
  ("props" .
   [3 0 0 0 0])
  ("gva.core" .
   [0 0 0 1 0 0 0 0])
  ("find-ns" .
   [1 0 0 0 0 0 0])
  ("test-whim2-vcf" .
   [0 0 0 0 0 0 1 0 0 1 0 0 0 0])
  ("vcf->records" .
   [0 0 0 0 0 1 1 0 1 0 0 0])
  ("test-vcf" .
   [1 0 0 0 0 1 2 3])
  (":h1" .
   [4 0 0])
  ("html" .
   [5 0 0 0])
  ("404" .
   [1 0 0])
  (":status" .
   [1 0 0 0 0 0 0])
  ("comment" .
   [3 0 0 0 0 0 0])
  ("output-dir" .
   [11 0 0 4 2 0 3 1 0 1])
  ("java.io.File." .
   [1 0 0 0 0 0 0 0 0 0 0 0 0])
  ("dir" .
   [2 0 0])
  ("let" .
   [12 0 0])
  ("files" .
   [1 0 0 0 0])
  ("download-file" .
   [0 0 0 0 2 0 0 0 0 0 0 0 0])
  ("str" .
   [20 0 0])
  ("job-id" .
   [4 0 0 0 0 0])
  ("job-link" .
   [0 0 0 1 0 0 0 0])
  (":href" .
   [1 0 0 0 0])
  ("unordered-list" .
   [1 0 0 0 0 0 0 0 0 1 0 0 0 0])
  ("glutton.core" .
   [1 0 0 0 0 0 0 0 0 0 1 0])
  ("test-sweet" .
   [2 0 0 0 0 0 0 0 0 0])
  ("count" .
   [5 0 0 0 0])
  ("->peptides" .
   [0 0 0 0 0 2 0 0 0 0])
  ("clojure.test" .
   [1 0 0 0 0 0 0 0 0 0 0 0])
  (":use" .
   [1 0 0 0])
  ("clojure.test.tap" .
   [0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0])
  ("deftest" .
   [1 0 0 0 0 0 0])
  ("defn" .
   [8 0 0 0])
  ("test-short" .
   [2 0 0 0 0 0 0 0 0 0])
  ("ns" .
   [4 0])
  ("GET" .
   [1 0 0])
  ("keys" .
   [8 0 0 0])
  ("request" .
   [5 0 0 0 0 0 0])
  ("ref" .
   [0 0 1])
  ("require" .
   [0 0 0 1 1 0 0])
  (":keys" .
   [2 0 0 0 0])
  ("seq" .
   [3 0 0])
  ("list" .
   [1 0 0 0])
  ("for" .
   [5 0 0])
  ("println" .
   [23 0 0 0 0 0 0])
  (":pie-params" .
   [1 0 0 0 0 0 0 0 0 0 0])
  (":only" .
   [2 0 0 0 0])
  ("_" .
   [9])
  ("doto" .
   [2 0 4 0])
  (".delete" .
   [2 0 0 0 0 0 0])
  ("->" .
   [2 0])
  ("java.io.File/createTempFile" .
   [2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("outputDir" .
   [1 0 0 0 0 0 0 0 0])
  ("pie" .
   [8 0 0])
  ("temp-dir" .
   [5 0 0 0 0 0 0 0])
  (".mkdir" .
   [2 0 0 0 0 0])
  ("underive" .
   [0 0 0 1 0 0 0 0])
  ("proj-dir" .
   [15 0 0 0 0 1 0 2])
  ("copy" .
   [4 0 0 0])
  ("file" .
   [26 0 0 0])
  (".list" .
   [4 0 0 0 0])
  (".getFileName" .
   [0 0 0 0 0 0 0 0 1 0 0 0])
  (".getCanonicalName" .
   [0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0])
  (".getName" .
   [2 0 0 0 0 0 0 0])
  ("app" .
   [2 0 0])
  (".exists" .
   [3 0 0 0 0 0 0])
  ("doseq" .
   [5 0 0 0 0])
  ("doall" .
   [1 0 0 0 0])
  ("write-proj-dir" .
   [0 0 0 1 0 0 0 0 0 0 0 0 0 0])
  ("proxy" .
   [0 0 0 0 1])
  ("props->map" .
   [3 0 0 0 1 0 0 0 0 0])
  ("init" .
   [3 0 0 0])
  ("clear-output-dir" .
   [0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0])
  ("props-pair" .
   [0 0 0 0 0 0 0 0 1 0])
  (":outputDir" .
   [1 0 0 0 0 0 0 0 0 0])
  ("config-props" .
   [0 0 0 0 0 0 0 1 0 0 0 0])
  ("into" .
   [5 0 1 0])
  ("System" .
   [1 0 0 0 0 0])
  ("System/getenv" .
   [1 0 0 0 0 0 0 0 0 0 0 0 0])
  (".get" .
   [4 0 0 0])
  ("merge" .
   [3 0 0 0 0])
  ("name" .
   [3 0 0 0])
  ("first" .
   [2 0 0 0 0])
  ("pr" .
   [1 0])
  ("pair" .
   [2 0 0 0])
  ("second" .
   [2 0 0 0 0 0])
  ("vec" .
   [2 0 0])
  ("hash-map" .
   [1 0 0 0 0 0 0 0])
  ("*out*" .
   [0 0 0 2 0])
  ("while" .
   [1 0 0 0 0])
  ("next" .
   [1 0 0 0])
  ("elem" .
   [2 0 0 0])
  ("demo-all-props-path" .
   [0 0 0 0 0 0 1 0 6 0 0 0 0 0 0 0 0 0 0])
  ("demo-dir" .
   [1 0 0 0 1 0 0 0])
  ("top-props-path" .
   [1 0 0 0 0 0 0 0 0 0 1 0 1 0])
  ("ClassLoader" .
   [0 0 0 0 0 0 0 0 1 0 0])
  ("ClassLoader/getSystemResourceAsStream" .
   [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0])
  ("bases" .
   [0 0 0 0 1])
  ("base-dir" .
   [0 0 0 0 0 1 0 0])
  ("default-file-dir" .
   [0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0])
  ("default-files" .
   [2 0 0 0 0 0 0 0 0 0 0 0 0])
  ("proj-props-path" .
   [1 0 0 0 0 0 0 0 0 0 0 1 0 0 0])
  ("filename" .
   [3 0 0 0 0 0 0 0])
  ("cond" .
   [1 0 0 0])
  (":else" .
   [1 0 0 0 0])
  ("and" .
   [1 0 0])
  ("not" .
   [2 0 0])
  (".startsWith" .
   [3 0 0 0 0 0 0 0 0 0 0])
  ("demo-all-props" .
   [1 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("job-resource" .
   [1 0 0 0 0 0 0 0 0 0 0 0])
  ("time" .
   [1 0 0 0])
  ("assoc" .
   [0 0 0 1 0])
  ("assert" .
   [0 0 0 0 0 1])
  ("assemble" .
   [1 0 0 0 0 0 0 0])
  ("test-hg18-path" .
   [0 0 0 0 0 0 0 2 0 0 0 0 0 0])
  ("line-seq-performace" .
   [0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0])
  ("test-big-fasta" .
   [0 0 0 0 0 0 0 0 0 0 0 0 1 0])
  ("fasta-by-chromosome" .
   [0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0])
  ("test-fasta" .
   [0 0 0 0 0 0 0 1 0 0])))
